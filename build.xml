<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2005, 2006, 2008, 2010, 2011, 2013, 2014, 2017, 2018, 2019 Global Virtual Airlines Group. All Rights Reserved. -->
<project default="deploy">
	
	<!-- Lowercase function -->
	<scriptdef language="javascript" name="lower">
		<attribute name="string" /> 
		<attribute name="to" />
			project.setProperty(attributes.get("to"),attributes.get("string").toLowerCase());
	</scriptdef>
	
	<target name="compile" description="Precompile the Java Code">
		<mkdir dir="${java.io.tmpdir}/afv/build/classes" />
		<javac srcdir="src/java" optimize="on" destdir="${java.io.tmpdir}/afv/build/classes" debug="true" debuglevel="lines,vars,source" source="14" target="14" compiler="modern" includeantruntime="false">
			<compilerarg value="-Xlint:unchecked" />
	    	<classpath id="afv.classpath">
				<fileset dir="${ant.home}/lib" includes="*.jar" />
				<fileset dir="../DVA2006/lib" includes="**/*.jar" />
				<pathelement location="${java.io.tmpdir}/build/golgotha.jar" />
	    		<pathelement location="${java.io.tmpdir}/build/golgotha_web.jar" />
	    	</classpath>
		</javac>
		
		<!-- Compress the Java classes into a single JAR file -->
		<jar basedir="${java.io.tmpdir}/afv/build/classes" compress="true" index="true" destfile="${java.io.tmpdir}/afv/build/afv2006.jar" />
	</target>
	
	<!-- Precompile the JSP pages -->
	<target name="jspc" depends="compile">
		<property name="jspc.dva.webXMLInc" value="${java.io.tmpdir}/src/jsp/include.xml" />
		<property name="jspc.afv.webXMLInc" value="${java.io.tmpdir}/afv/src/jsp/include.xml" />
		<taskdef classname="org.apache.jasper.JspC" name="jasper2"> 
			<classpath id="afv.jspc.classpath"> 
				<fileset dir="${ant.home}/lib" includes="*.jar" />
				<fileset dir="../DVA2006/lib/jspc" includes="*.jar" />
				<fileset dir="../DVA2006/lib" includes="**/*.jar" />
				<pathelement location="${java.io.tmpdir}/build/golgotha.jar" />
				<pathelement location="${java.io.tmpdir}/build/golgotha_web.jar" />
				<pathelement location="${java.io.tmpdir}/afv/build/afv2006.jar" />
			</classpath> 
		</taskdef>
		
		<!-- Delete the old web.xml -->
		<delete file="${java.io.tmpdir}/afv/build/web.xml" />
		
		<!-- Copy the new web.xml and TLD files from DVA2006 -->
		<copy file="WEB-INF/web_core.xml" tofile="WEB-INF/web.xml" />
		<copy todir="WEB-INF">
			<fileset dir="../DVA2006/WEB-INF" includes="*.tld" />
		</copy>
		
		<!-- Copy the main header files -->
		<copy todir="jsp/main" overwrite="false">
			<fileset dir="../DVA2006/jsp/main" includes="*.jspf" />
		</copy>
		
		<!-- Precompile the files -->
		<mkdir dir="${java.io.tmpdir}/afv/src/jsp" />
	    <jasper2 package="net.afva" uriroot="${basedir}" verbose="0" poolingEnabled="true" xpoweredBy="false" validateXml="false" webXmlFragment="${jspc.afv.webXMLInc}"
	    	compilerTargetVM="1.14" compilerSourceVM="1.14" trimSpaces="FALSE" outputDir="${java.io.tmpdir}/afv/src/jsp" />
		
		<!-- Clean up -->
		<delete>
			<fileset dir="WEB-INF" includes="web.xml,*.tld" />
			<fileset dir="jsp/main" includes="*.jspf" />
		</delete>

		<!-- Compile the files -->
		<mkdir dir="${java.io.tmpdir}/afv/build/jsp" />
		<javac srcdir="${java.io.tmpdir}/afv/src/jsp" destdir="${java.io.tmpdir}/afv/build/jsp" nowarn="on" compiler="modern" debug="on" debuglevel="source" optimize="on" target="14" source="14" includeantruntime="false">
			<classpath refid="afv.jspc.classpath" />
			<include name="net/afva/jsp/**/*.java" />
		</javac>

		<!-- Compress the Java classes into a single JAR file -->
		<jar basedir="${java.io.tmpdir}/afv/build/jsp" compress="true" index="true"
		 	destfile="${java.io.tmpdir}/afv/build/afv2006_jsp.jar" />
		
		<!-- Force all JSPs to load on startup -->
		<!-- <replace file="${jspc.afv.webXMLInc}" token="&lt;/servlet-class&gt;">
			<replacevalue><![CDATA[</servlet-class>
        <load-on-startup>2</load-on-startup>]]></replacevalue>
		</replace> -->
		 		 
		<!-- Merge the precompile definitions into web.xml -->
		<loadfile property="afv.webXmlFragment" srcFile="${jspc.afv.webXMLInc}" />
		<loadfile property="dva.webXmlFragment" srcFile="${jspc.dva.webXMLInc}" />		
		<copy file="WEB-INF/web_core.xml" tofile="${java.io.tmpdir}/afv/build/web.xml" />
		<replace file="${java.io.tmpdir}/afv/build/web.xml" token="&lt;!-- [INSERT DVA FRAGMENT HERE] --&gt;" value="${dva.webXmlFragment}" />
		<replace file="${java.io.tmpdir}/afv/build/web.xml" token="&lt;!-- [INSERT AFV FRAGMENT HERE] --&gt;" value="${afv.webXmlFragment}" />
	</target>
	
	<target name="minify" description="Minify JS and CSS files">
		<available file="../DVA2006/lib/YUIAnt.jar" property="YUIANT_AVAILABLE" />
		<fail unless="YUIANT_AVAILABLE" message="Run jar target to generate the required task" />
		<taskdef name="yuicompress" classname="com.yahoo.platform.yui.compressor.YUICompressTask">
			<classpath>
				<fileset dir="../DVA2006/lib" includes="yuicompressor-*.jar" />
				<pathelement path="../DVA2006/lib/YUIAnt.jar" />
			</classpath>
		</taskdef>

		<!-- Minify JS -->
		<mkdir dir="${java.io.tmpdir}/afv/build/min/js" />
		<yuicompress linebreak="300" warn="false" munge="yes" preserveallsemicolons="true" outputfolder="${java.io.tmpdir}/afv/build/min/js">
			<fileset dir="static/js" >
				<include name="*.js" />
				<modified seldirs="true" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.min.cache.txt" />
				</modified>
			</fileset>
		</yuicompress>
		<move todir="${java.io.tmpdir}/afv/build/min/js" includeemptydirs="false">
			<fileset dir="${java.io.tmpdir}/afv/build/min/js">
				<include name="*.js" />
				<exclude name="*-min.js" />
			</fileset>
			<mapper type="glob" from="*.js" to="*-min.js"/>
		</move>
		
		<!-- Minify CSS -->
		<mkdir dir="${java.io.tmpdir}/afv/build/min/css" />
		<yuicompress linebreak="300" warn="false" munge="yes" preserveallsemicolons="true" outputfolder="${java.io.tmpdir}/afv/build/min/css">
			<fileset dir="static/css" >
				<include name="**/*.css" />
				<modified seldirs="true" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.min.cache.txt" />
				</modified>
			</fileset>
		</yuicompress>
		<move todir="${java.io.tmpdir}/afv/build/min/css" includeemptydirs="false">
			<fileset dir="${java.io.tmpdir}/afv/build/min/css">
				<include name="**/*.css" />
				<exclude name="**/*-min.css" />
			</fileset>
			<mapper type="glob" from="*.css" to="*-min.css"/>
		</move>
	</target>
	
	<target name="deploy" depends="jspc,minify" description="Deploy to Development environment">
		<loadproperties srcFile="data/build_deploy.properties" />
		<property name="webapp.dev.port" value="22" />
		<lower string="${user.name}" to="webapp.dev.user" />
		<property name="http.dev.port" value="22" />
		<lower string="${user.name}" to="http.dev.user" />
		<mkdir dir="../.local_data" />
		
		<!-- Upload the web configuration -->
		<scp todir="${webapp.dev.user}@${webapp.dev.server}:${webapp.dev.path}/WEB-INF"
			port="${webapp.dev.port}" verbose="yes" trust="yes" keyfile="${webapp.dev.key}">
			<fileset file="${java.io.tmpdir}/afv/build/web.xml">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.cfg.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>

		<!-- Upload the JAR files to the app server -->
		<scp todir="${webapp.dev.user}@${webapp.dev.server}:${webapp.dev.path}/WEB-INF/lib"
			port="${webapp.dev.port}" verbose="yes" trust="yes" keyfile="${webapp.dev.key}">
			<fileset dir="${java.io.tmpdir}/build">
				<include name="golgotha.jar" />
				<include name="golgotha_web.jar" />
				<include name="golgotha_jsp.jar" />
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.jar.cache.dev.txt" />
				</modified>
			</fileset>
			<fileset dir="${java.io.tmpdir}/afv/build">
				<include name="*.jar" />
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.jar.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload the config files to the app server -->
		<scp todir="${webapp.dev.user}@${webapp.dev.server}:${webapp.dev.path}/WEB-INF/classes/etc"
			port="${webapp.dev.port}" verbose="yes" trust="yes" keyfile="${webapp.dev.key}">
			<fileset dir="etc" includes="*.*">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.cfg.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload static content to the HTTP server -->
		<scp todir="${http.dev.user}@${http.dev.server}:${http.dev.path}" verbose="yes" port="${http.dev.port}" trust="yes" keyfile="${http.dev.key}">
			<fileset dir="static">
				<modified seldirs="true" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.static.cache.dev.txt" />
				</modified>
			</fileset>
			<fileset dir="${java.io.tmpdir}/afv/build/min">
				<modified seldirs="true" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.static.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>
	</target>
	
	<!-- Clean out compiled data -->
	<target name="clean" description="Clean build directories">
		<delete dir="${java.io.tmpdir}/build" />
		<delete dir="${java.io.tmpdir}/src/jsp" />
		<delete file="${java.io.tmpdir}/build/web.xml" />
		<delete file="../.local_data/afv.min.cache.txt" />
	</target>
	
	<!-- Production Deployment via SSH -->
	<target name="prod_deploy" depends="jspc,minify" description="Deploy to Production environment">
		<loadproperties srcFile="data/build_deploy.properties" />
		<property name="webapp.ssh.port" value="22" />
		<lower string="${user.name}" to="webapp.ssh.user" />
		<property name="http.ssh.port" value="22" />
		<lower string="${user.name}" to="http.ssh.user" />
		<mkdir dir="../.local_data" />
		
		<!-- Upload the web configuration -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path}"
			port="${webapp.ssh.port}" verbose="yes" trust="yes" keyfile="${webapp.ssh.key}">
			<fileset file="${java.io.tmpdir}/afv/build/web.xml">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.cfg.cache.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload the common JAR files to the app server -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path.common}"
			port="${webapp.ssh.port}" verbose="yes" trust="yes" keyfile="${webapp.ssh.key}">
			<fileset dir="../DVA2006/lib/deploy" includes="*.jar">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.txt" />
				</modified>
			</fileset>
		</scp>

		<!-- Upload the JAR files to the app server -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path}/lib"
			port="${webapp.ssh.port}" verbose="yes" trust="yes" keyfile="${webapp.ssh.key}">
			<fileset dir="${java.io.tmpdir}/build">
				<include name="golgotha.jar" />
				<include name="golgotha_web.jar" />
				<include name="golgotha_jsp.jar" />
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.jar.cache.txt" />
				</modified>
			</fileset>
			<fileset dir="${java.io.tmpdir}/afv/build">
				<include name="*.jar" />
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.jar.cache.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload the config file to the app server -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path}/classes/etc"
			port="${webapp.ssh.port}" verbose="yes" trust="yes" keyfile="${webapp.ssh.key}">
			<fileset dir="etc">
				<include name="commands.xml" />
				<include name="services.xml" />
				<include name="codeshares.txt" />
				<include name="cacheInfo.xml" />
				<include name="bb_config.xml" />
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.cfg.cache.txt" />
				</modified>
			</fileset>
			<fileset dir="etc/prod">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.cfg.cache.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload static content to the HTTP server -->
		<scp todir="${http.ssh.user}@${http.ssh.server}:${http.ssh.path}"
			port="${http.ssh.port}" verbose="yes" trust="yes" keyfile="${http.ssh.key}">
			<fileset dir="static">
				<modified seldirs="true" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.static.cache.txt" />
				</modified>
			</fileset>
			<fileset dir="${java.io.tmpdir}/afv/build/min">
				<modified seldirs="true" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/afv.static.cache.txt" />
				</modified>
			</fileset>
		</scp>
	</target>
</project>
